= About =

ATListbox is OS-independant listbox control. It's made for dialog like Sublime Text's command list. If OnDrawItem is set, listbox is fully owner-drawn: you must not set items, just set ItemCount, ItemIndex.

Listbox doesn't get focus by click; to get focus on click set CanGetFocus=true (if focused, it handles keys Up/Down/PgUp/PgDn/Home/End, else you need to handle OnKeyDown in form and set listbox's ItemIndex by hand, which is boring). 

Author: Alexey Torgashin

Screenshot:

[[File:atlistbox.png]]

= Download =

Homepage at github: https://github.com/Alexey-T/ATButtons

= License =

MPL 2.0 or LGPL.

= Requirements =

Lazarus: 1.4.0

Tested on: Win32 (Windows 7), Linux GTK2 / QT (Ubuntu 14.04), macOS (10.8)

= Properties =

* Items: StringList to store items, or you can ignore it if you use OnDrawItem event (listbox will be fully virtual)
* ItemCount: count of items
* ItemIndex: index of active item
* ItemTop: index of item visible at the top
* ItemHeight: height (in pixels) of each item
* VisibleItems: count of items fully visible inside control
* CanGetFocus: allow control to be focused on click

* ThemedScrollbar: allows control to use [[ATScrollBar]] instead of default OS scrollbar
* ThemedColors: not used (made to use in CudaText app)

Events

* OnClick
* OnDblClick
* OnDrawItem: allows to owner-draw all items
* OnChangedSel: fired on changed ItemIndex

= Example =

Let's create list:

<syntaxhighlight>
var
  b: TATListbox;

procedure TfmMain.FormCreate(Sender: TObject);
begin
  b:= TATListbox.Create(Self);
  b.Parent:= Self;
  b.Align:= alClient;

  b.OnDrawItem:= @ListDraw;
  b.OnClick:= @ListClick;

  b.Color:= $e0e0e0;
  b.ItemCount:= 21;
end;
</syntaxhighlight>
       
Let's set OnDrawItem to this (simply paint "itemNN"):

<syntaxhighlight>
procedure TfmMain.ListDraw(Sender: TObject; C: TCanvas; AIndex: integer;
  const ARect: TRect);
begin
  C.Brush.Color:= IfThen(AIndex=b.ItemIndex, clMedGray, b.Color);
  C.FillRect(ARect);

  C.Pen.Color:= clMedGray;
  C.Line(ARect.Left+2, ARect.Bottom-1, ARect.Right-2, ARect.Bottom-1);

  C.TextOut(ARect.Left+6, ARect.Top+2, 'item '+inttostr(AIndex));
end;
</syntaxhighlight>


[[Category:Components]]
